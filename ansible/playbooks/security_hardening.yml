---
- name: Harden all servers with security best practices
  hosts:
    - brain
    - eyes
    - mlcompute
    - datahub
    - workersplus
    - workersinternal
    - workers
    - web_servers
    - local_brain
  become: true
  # ansible-playbook -i servers.vault.yml --ask-vault-pass playbooks/security_hardening.yml --limit contabo-10
  # ansible-playbook -i servers.vault.yml --ask-vault-pass playbooks/security_hardening.yml


  tasks:
    #---------------------------------------------------
    # SECTION 1: INSTALL ESSENTIAL SECURITY PACKAGES
    #---------------------------------------------------
    - name: Install UFW (Firewall) and Fail2Ban
      ansible.builtin.apt:
        name:
          - ufw
          - fail2ban
        state: present
        update_cache: yes

    #---------------------------------------------------
    # SECTION 2: CONFIGURE THE FIREWALL (UFW)
    #---------------------------------------------------
    - name: Reset UFW to a clean, default state
      community.general.ufw:
        state: reset

    - name: Set UFW default policies (deny incoming, allow outgoing)
      community.general.ufw:
        direction: "{{ item.direction }}"
        policy: "{{ item.policy }}"
      loop:
        - { direction: 'incoming', policy: 'deny' }
        - { direction: 'outgoing', policy: 'allow' }

    - name: Allow all traffic on the local loopback interface
      community.general.ufw:
        rule: allow
        interface: lo

    - name: Allow all traffic from our private Tailscale network
      community.general.ufw:
        rule: allow
        # This IP range is standard for Tailscale.
        src: '100.64.0.0/10'

    - name: (CRITICAL) Allow incoming SSH connections on the public interface
      community.general.ufw:
        rule: allow
        name: OpenSSH # This is a built-in profile for port 22
      # This task notifies the 'Enable UFW' handler, ensuring the firewall
      # is only enabled if the critical SSH rule is successfully added.
      notify: Enable UFW

    # --- Conditional Public Access ---
    # To open web ports for a server, create a `web_servers` group
    # in your inventory file and add the server to it.
    - name: Allow public HTTP traffic for designated web servers
      community.general.ufw:
        rule: allow
        port: '80'
        proto: tcp
      when: inventory_hostname in groups['web_servers'] | default([])

    - name: Allow public HTTPS traffic for designated web servers
      community.general.ufw:
        rule: allow
        port: '443'
        proto: tcp
      when: inventory_hostname in groups['web_servers'] | default([])

    #---------------------------------------------------
    # SECTION 3: HARDEN SSH SERVER
    #---------------------------------------------------
    - name: Disallow root login via SSH with password
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?PermitRootLogin'
        line: 'PermitRootLogin prohibit-password'
        validate: 'sshd -t -f %s'
      notify: Restart sshd

    - name: Disable password authentication entirely (force key-based login)
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?PasswordAuthentication'
        line: 'PasswordAuthentication no'
        validate: 'sshd -t -f %s'
      notify: Restart sshd

    #---------------------------------------------------
    # SECTION 4: ENABLE FAIL2BAN
    #---------------------------------------------------
    - name: Ensure fail2ban service is running and enabled on boot
      ansible.builtin.service:
        name: fail2ban
        state: started
        enabled: yes

  # Handlers are only run if a task with a "notify" statement makes a change.
  handlers:
    - name: Restart sshd
      ansible.builtin.service:
        name: sshd
        state: restarted

    - name: Enable UFW
      community.general.ufw:
        state: enabled
